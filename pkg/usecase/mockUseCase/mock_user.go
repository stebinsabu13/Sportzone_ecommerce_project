// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/user.go

// Package mockUseCase is a generated GoMock package.
package mockUseCase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/stebinsabu13/ecommerce-api/pkg/domain"
	utils "github.com/stebinsabu13/ecommerce-api/pkg/utils"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserUseCase) AddAddress(arg0 context.Context, arg1 domain.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserUseCaseMockRecorder) AddAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserUseCase)(nil).AddAddress), arg0, arg1)
}

// ChangePassword mocks base method.
func (m *MockUserUseCase) ChangePassword(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserUseCaseMockRecorder) ChangePassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserUseCase)(nil).ChangePassword), arg0, arg1, arg2)
}

// EditProfile mocks base method.
func (m *MockUserUseCase) EditProfile(arg0 context.Context, arg1 utils.EditProfileReq, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditProfile indicates an expected call of EditProfile.
func (mr *MockUserUseCaseMockRecorder) EditProfile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProfile", reflect.TypeOf((*MockUserUseCase)(nil).EditProfile), arg0, arg1, arg2)
}

// FindbyEmail mocks base method.
func (m *MockUserUseCase) FindbyEmail(ctx context.Context, email string) (utils.ResponseUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindbyEmail", ctx, email)
	ret0, _ := ret[0].(utils.ResponseUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindbyEmail indicates an expected call of FindbyEmail.
func (mr *MockUserUseCaseMockRecorder) FindbyEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindbyEmail", reflect.TypeOf((*MockUserUseCase)(nil).FindbyEmail), ctx, email)
}

// FindbyEmailorMobilenum mocks base method.
func (m *MockUserUseCase) FindbyEmailorMobilenum(ctx context.Context, body utils.OtpLogin) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindbyEmailorMobilenum", ctx, body)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindbyEmailorMobilenum indicates an expected call of FindbyEmailorMobilenum.
func (mr *MockUserUseCaseMockRecorder) FindbyEmailorMobilenum(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindbyEmailorMobilenum", reflect.TypeOf((*MockUserUseCase)(nil).FindbyEmailorMobilenum), ctx, body)
}

// FindbyUserID mocks base method.
func (m *MockUserUseCase) FindbyUserID(arg0 context.Context, arg1 uint) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindbyUserID", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindbyUserID indicates an expected call of FindbyUserID.
func (mr *MockUserUseCaseMockRecorder) FindbyUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindbyUserID", reflect.TypeOf((*MockUserUseCase)(nil).FindbyUserID), arg0, arg1)
}

// ListAllCategories mocks base method.
func (m *MockUserUseCase) ListAllCategories(ctx context.Context) ([]utils.ResponseCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllCategories", ctx)
	ret0, _ := ret[0].([]utils.ResponseCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllCategories indicates an expected call of ListAllCategories.
func (mr *MockUserUseCaseMockRecorder) ListAllCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllCategories", reflect.TypeOf((*MockUserUseCase)(nil).ListAllCategories), ctx)
}

// ShowAddress mocks base method.
func (m *MockUserUseCase) ShowAddress(ctx context.Context, id uint) ([]utils.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowAddress", ctx, id)
	ret0, _ := ret[0].([]utils.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowAddress indicates an expected call of ShowAddress.
func (mr *MockUserUseCaseMockRecorder) ShowAddress(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowAddress", reflect.TypeOf((*MockUserUseCase)(nil).ShowAddress), ctx, id)
}

// ShowDetails mocks base method.
func (m *MockUserUseCase) ShowDetails(ctx context.Context, id uint) (utils.ResponseUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowDetails", ctx, id)
	ret0, _ := ret[0].(utils.ResponseUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowDetails indicates an expected call of ShowDetails.
func (mr *MockUserUseCaseMockRecorder) ShowDetails(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowDetails", reflect.TypeOf((*MockUserUseCase)(nil).ShowDetails), ctx, id)
}

// SignUpUser mocks base method.
func (m *MockUserUseCase) SignUpUser(ctx context.Context, user utils.BodySignUpuser) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpUser", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpUser indicates an expected call of SignUpUser.
func (mr *MockUserUseCaseMockRecorder) SignUpUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpUser", reflect.TypeOf((*MockUserUseCase)(nil).SignUpUser), ctx, user)
}

// UpdateVerify mocks base method.
func (m *MockUserUseCase) UpdateVerify(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVerify indicates an expected call of UpdateVerify.
func (mr *MockUserUseCaseMockRecorder) UpdateVerify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerify", reflect.TypeOf((*MockUserUseCase)(nil).UpdateVerify), arg0, arg1)
}

// ViewWallet mocks base method.
func (m *MockUserUseCase) ViewWallet(arg0 uint) ([]utils.ResWallet, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewWallet", arg0)
	ret0, _ := ret[0].([]utils.ResWallet)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ViewWallet indicates an expected call of ViewWallet.
func (mr *MockUserUseCaseMockRecorder) ViewWallet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewWallet", reflect.TypeOf((*MockUserUseCase)(nil).ViewWallet), arg0)
}
