// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/order.go

// Package mockUseCase is a generated GoMock package.
package mockUseCase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	utils "github.com/stebinsabu13/ecommerce-api/pkg/utils"
)

// MockOrderUseCase is a mock of OrderUseCase interface.
type MockOrderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUseCaseMockRecorder
}

// MockOrderUseCaseMockRecorder is the mock recorder for MockOrderUseCase.
type MockOrderUseCaseMockRecorder struct {
	mock *MockOrderUseCase
}

// NewMockOrderUseCase creates a new mock instance.
func NewMockOrderUseCase(ctrl *gomock.Controller) *MockOrderUseCase {
	mock := &MockOrderUseCase{ctrl: ctrl}
	mock.recorder = &MockOrderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUseCase) EXPECT() *MockOrderUseCaseMockRecorder {
	return m.recorder
}

// AddtoOrders mocks base method.
func (m *MockOrderUseCase) AddtoOrders(arg0, arg1, arg2 uint, arg3 *uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddtoOrders", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddtoOrders indicates an expected call of AddtoOrders.
func (mr *MockOrderUseCaseMockRecorder) AddtoOrders(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddtoOrders", reflect.TypeOf((*MockOrderUseCase)(nil).AddtoOrders), arg0, arg1, arg2, arg3)
}

// CancelOrder mocks base method.
func (m *MockOrderUseCase) CancelOrder(arg0, arg1, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrderUseCaseMockRecorder) CancelOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrderUseCase)(nil).CancelOrder), arg0, arg1, arg2)
}

// FindCoupon mocks base method.
func (m *MockOrderUseCase) FindCoupon(arg0 string) (*uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCoupon", arg0)
	ret0, _ := ret[0].(*uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCoupon indicates an expected call of FindCoupon.
func (mr *MockOrderUseCaseMockRecorder) FindCoupon(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCoupon", reflect.TypeOf((*MockOrderUseCase)(nil).FindCoupon), arg0)
}

// ListAllOrders mocks base method.
func (m *MockOrderUseCase) ListAllOrders() ([]utils.ResAllOrders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllOrders")
	ret0, _ := ret[0].([]utils.ResAllOrders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllOrders indicates an expected call of ListAllOrders.
func (mr *MockOrderUseCaseMockRecorder) ListAllOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllOrders", reflect.TypeOf((*MockOrderUseCase)(nil).ListAllOrders))
}

// OrderDetail mocks base method.
func (m *MockOrderUseCase) OrderDetail(arg0 uint) ([]utils.ResponseOrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderDetail", arg0)
	ret0, _ := ret[0].([]utils.ResponseOrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderDetail indicates an expected call of OrderDetail.
func (mr *MockOrderUseCaseMockRecorder) OrderDetail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderDetail", reflect.TypeOf((*MockOrderUseCase)(nil).OrderDetail), arg0)
}

// Orders mocks base method.
func (m *MockOrderUseCase) Orders(ctx context.Context, id uint) ([]utils.ResOrders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Orders", ctx, id)
	ret0, _ := ret[0].([]utils.ResOrders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Orders indicates an expected call of Orders.
func (mr *MockOrderUseCaseMockRecorder) Orders(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Orders", reflect.TypeOf((*MockOrderUseCase)(nil).Orders), ctx, id)
}

// Razorpayment mocks base method.
func (m *MockOrderUseCase) Razorpayment(arg0 uint, arg1 *uint) (utils.RazorpayOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Razorpayment", arg0, arg1)
	ret0, _ := ret[0].(utils.RazorpayOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Razorpayment indicates an expected call of Razorpayment.
func (mr *MockOrderUseCaseMockRecorder) Razorpayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Razorpayment", reflect.TypeOf((*MockOrderUseCase)(nil).Razorpayment), arg0, arg1)
}

// ReturnOrder mocks base method.
func (m *MockOrderUseCase) ReturnOrder(arg0, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnOrder indicates an expected call of ReturnOrder.
func (mr *MockOrderUseCaseMockRecorder) ReturnOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrder", reflect.TypeOf((*MockOrderUseCase)(nil).ReturnOrder), arg0, arg1)
}

// UpdateStatus mocks base method.
func (m *MockOrderUseCase) UpdateStatus(arg0, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockOrderUseCaseMockRecorder) UpdateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockOrderUseCase)(nil).UpdateStatus), arg0, arg1)
}

// ValidateCoupon mocks base method.
func (m *MockOrderUseCase) ValidateCoupon(arg0 uint, arg1 string) (*uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCoupon", arg0, arg1)
	ret0, _ := ret[0].(*uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateCoupon indicates an expected call of ValidateCoupon.
func (mr *MockOrderUseCaseMockRecorder) ValidateCoupon(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCoupon", reflect.TypeOf((*MockOrderUseCase)(nil).ValidateCoupon), arg0, arg1)
}
