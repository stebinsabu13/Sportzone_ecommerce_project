// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/order.go

// Package mockRepo is a generated GoMock package.
package mockRepo

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/stebinsabu13/ecommerce-api/pkg/domain"
	utils "github.com/stebinsabu13/ecommerce-api/pkg/utils"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// AddtoOrders mocks base method.
func (m *MockOrderRepository) AddtoOrders(arg0 []utils.ResCartItems, arg1 domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddtoOrders", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddtoOrders indicates an expected call of AddtoOrders.
func (mr *MockOrderRepositoryMockRecorder) AddtoOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddtoOrders", reflect.TypeOf((*MockOrderRepository)(nil).AddtoOrders), arg0, arg1)
}

// CancelOrder mocks base method.
func (m *MockOrderRepository) CancelOrder(arg0 uint, arg1 domain.OrderDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrderRepositoryMockRecorder) CancelOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrderRepository)(nil).CancelOrder), arg0, arg1)
}

// FindCoupon mocks base method.
func (m *MockOrderRepository) FindCoupon(arg0 string) (domain.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCoupon", arg0)
	ret0, _ := ret[0].(domain.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCoupon indicates an expected call of FindCoupon.
func (mr *MockOrderRepositoryMockRecorder) FindCoupon(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCoupon", reflect.TypeOf((*MockOrderRepository)(nil).FindCoupon), arg0)
}

// FindOrderitem mocks base method.
func (m *MockOrderRepository) FindOrderitem(arg0 uint) (domain.OrderDetails, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderitem", arg0)
	ret0, _ := ret[0].(domain.OrderDetails)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindOrderitem indicates an expected call of FindOrderitem.
func (mr *MockOrderRepositoryMockRecorder) FindOrderitem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderitem", reflect.TypeOf((*MockOrderRepository)(nil).FindOrderitem), arg0)
}

// Findcartitems mocks base method.
func (m *MockOrderRepository) Findcartitems(id uint) ([]utils.ResCartItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Findcartitems", id)
	ret0, _ := ret[0].([]utils.ResCartItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Findcartitems indicates an expected call of Findcartitems.
func (mr *MockOrderRepositoryMockRecorder) Findcartitems(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Findcartitems", reflect.TypeOf((*MockOrderRepository)(nil).Findcartitems), id)
}

// ListAllOrders mocks base method.
func (m *MockOrderRepository) ListAllOrders() ([]utils.ResAllOrders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllOrders")
	ret0, _ := ret[0].([]utils.ResAllOrders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllOrders indicates an expected call of ListAllOrders.
func (mr *MockOrderRepositoryMockRecorder) ListAllOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllOrders", reflect.TypeOf((*MockOrderRepository)(nil).ListAllOrders))
}

// OrderDetail mocks base method.
func (m *MockOrderRepository) OrderDetail(arg0 uint) ([]utils.ResponseOrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderDetail", arg0)
	ret0, _ := ret[0].([]utils.ResponseOrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderDetail indicates an expected call of OrderDetail.
func (mr *MockOrderRepositoryMockRecorder) OrderDetail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderDetail", reflect.TypeOf((*MockOrderRepository)(nil).OrderDetail), arg0)
}

// Orders mocks base method.
func (m *MockOrderRepository) Orders(ctx context.Context, id uint) ([]utils.ResOrders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Orders", ctx, id)
	ret0, _ := ret[0].([]utils.ResOrders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Orders indicates an expected call of Orders.
func (mr *MockOrderRepositoryMockRecorder) Orders(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Orders", reflect.TypeOf((*MockOrderRepository)(nil).Orders), ctx, id)
}

// ReturnOrder mocks base method.
func (m *MockOrderRepository) ReturnOrder(arg0 domain.OrderDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnOrder indicates an expected call of ReturnOrder.
func (mr *MockOrderRepositoryMockRecorder) ReturnOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrder", reflect.TypeOf((*MockOrderRepository)(nil).ReturnOrder), arg0)
}

// UpdateStatus mocks base method.
func (m *MockOrderRepository) UpdateStatus(arg0 domain.OrderDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockOrderRepositoryMockRecorder) UpdateStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockOrderRepository)(nil).UpdateStatus), arg0)
}

// ValidateCoupon mocks base method.
func (m *MockOrderRepository) ValidateCoupon(arg0 domain.Coupon, arg1 []utils.ResCartItems, arg2 *domain.Cart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCoupon", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCoupon indicates an expected call of ValidateCoupon.
func (mr *MockOrderRepositoryMockRecorder) ValidateCoupon(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCoupon", reflect.TypeOf((*MockOrderRepository)(nil).ValidateCoupon), arg0, arg1, arg2)
}
