// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/cart.go

// Package mockRepo is a generated GoMock package.
package mockRepo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/stebinsabu13/ecommerce-api/pkg/domain"
	utils "github.com/stebinsabu13/ecommerce-api/pkg/utils"
)

// MockCartRepository is a mock of CartRepository interface.
type MockCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryMockRecorder
}

// MockCartRepositoryMockRecorder is the mock recorder for MockCartRepository.
type MockCartRepositoryMockRecorder struct {
	mock *MockCartRepository
}

// NewMockCartRepository creates a new mock instance.
func NewMockCartRepository(ctrl *gomock.Controller) *MockCartRepository {
	mock := &MockCartRepository{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepository) EXPECT() *MockCartRepositoryMockRecorder {
	return m.recorder
}

// AddNewitem mocks base method.
func (m *MockCartRepository) AddNewitem(item domain.CartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewitem", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewitem indicates an expected call of AddNewitem.
func (mr *MockCartRepositoryMockRecorder) AddNewitem(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewitem", reflect.TypeOf((*MockCartRepository)(nil).AddNewitem), item)
}

// DeleteCartitem mocks base method.
func (m *MockCartRepository) DeleteCartitem(item domain.CartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartitem", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCartitem indicates an expected call of DeleteCartitem.
func (mr *MockCartRepositoryMockRecorder) DeleteCartitem(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartitem", reflect.TypeOf((*MockCartRepository)(nil).DeleteCartitem), item)
}

// FindCartById mocks base method.
func (m *MockCartRepository) FindCartById(userid uint) (domain.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCartById", userid)
	ret0, _ := ret[0].(domain.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCartById indicates an expected call of FindCartById.
func (mr *MockCartRepositoryMockRecorder) FindCartById(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCartById", reflect.TypeOf((*MockCartRepository)(nil).FindCartById), userid)
}

// FindProductDetailById mocks base method.
func (m *MockCartRepository) FindProductDetailById(id string) (domain.ProductDetails, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductDetailById", id)
	ret0, _ := ret[0].(domain.ProductDetails)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindProductDetailById indicates an expected call of FindProductDetailById.
func (mr *MockCartRepositoryMockRecorder) FindProductDetailById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductDetailById", reflect.TypeOf((*MockCartRepository)(nil).FindProductDetailById), id)
}

// FindProductExsist mocks base method.
func (m *MockCartRepository) FindProductExsist(id string, cartid uint) (domain.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductExsist", id, cartid)
	ret0, _ := ret[0].(domain.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductExsist indicates an expected call of FindProductExsist.
func (mr *MockCartRepositoryMockRecorder) FindProductExsist(id, cartid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductExsist", reflect.TypeOf((*MockCartRepository)(nil).FindProductExsist), id, cartid)
}

// UpdateCartitem mocks base method.
func (m *MockCartRepository) UpdateCartitem(exsistitem domain.CartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartitem", exsistitem)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCartitem indicates an expected call of UpdateCartitem.
func (mr *MockCartRepositoryMockRecorder) UpdateCartitem(exsistitem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartitem", reflect.TypeOf((*MockCartRepository)(nil).UpdateCartitem), exsistitem)
}

// ViewCart mocks base method.
func (m *MockCartRepository) ViewCart(userid uint) ([]utils.ResViewCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCart", userid)
	ret0, _ := ret[0].([]utils.ResViewCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCart indicates an expected call of ViewCart.
func (mr *MockCartRepositoryMockRecorder) ViewCart(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCart", reflect.TypeOf((*MockCartRepository)(nil).ViewCart), userid)
}
